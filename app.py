# app.py  (–∑–∞–ø—É—Å–∫–∞—Ç—å –∏–º–µ–Ω–Ω–æ –µ–≥–æ –Ω–∞ Render)
import os
import asyncio
from flask import Flask, render_template
from aiogram import Bot, Dispatcher
from aiogram.types import Message

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
API_TOKEN = os.getenv("BOT_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å BOT_TOKEN –≤ Render -> Environment
PORT = int(os.getenv("PORT", 5000))

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- Flask (—Ñ—Ä–æ–Ω—Ç) ---
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return render_template("index.html")

# --- aiogram (–±–æ—Ç) ---
@dp.message()
async def echo_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Render üöÄ")

# --- –∑–∞–ø—É—Å–∫ ---
async def start_telegram():
    await dp.start_polling(bot)

def start_flask():
    flask_app.run(host="0.0.0.0", port=PORT)

async def main():
    loop = asyncio.get_event_loop()
    # Flask –Ω—É–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫, –æ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
    from concurrent.futures import ThreadPoolExecutor
    executor = ThreadPoolExecutor(1)
    loop.run_in_executor(executor, start_flask)

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await start_telegram()

if __name__ == "__main__":
    asyncio.run(main())
